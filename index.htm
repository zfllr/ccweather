<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Data Dashboard</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }
        .header {
            text-align: center; /* Center-align the header content */
            padding: 10px;
            background-color: #f4f4f4;
        }
        .header img {
            height: 50px;
            display: block;
            margin: 0 auto 10px auto; /* Center-align the logo */
        }
        .header h1 {
            margin: 0;
            font-size: 24px;
        }
        .container {
            max-width: 1200px;
            margin: auto;
            padding: 20px;
        }
        .chart-container {
            display: flex;
            justify-content: space-around;
            flex-wrap: wrap;
            margin-top: 40px; /* Increased space above visualizations */
        }
        .chart-box {
            width: 45%;
            margin-bottom: 30px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #f4f4f4;
        }
        .input-container {
            text-align: center;
            margin: 20px 0;
        }
        .input-container input {
            padding: 10px;
            font-size: 16px;
            width: 200px;
            margin-right: 10px;
        }
        .input-container button {
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="header">
        <img src="cclogo.png" alt="CoverCress Logo">
        <h1>Weather Data Dashboard</h1>
    </div>

    <div class="container">
        <div class="input-container">
            <input type="text" id="locationInput1" placeholder="Enter location 1...">
            <input type="date" id="startDateInput1" placeholder="Start date for location 1">
            <input type="date" id="endDateInput1" placeholder="End date for location 1">
            <br>
            <input type="text" id="locationInput2" placeholder="Enter location 2...">
            <input type="date" id="startDateInput2" placeholder="Start date for location 2">
            <input type="date" id="endDateInput2" placeholder="End date for location 2">
            <br>
            <input type="text" id="locationInput3" placeholder="Enter location 3...">
            <input type="date" id="startDateInput3" placeholder="Start date for location 3">
            <input type="date" id="endDateInput3" placeholder="End date for location 3">
            <br>
            <button onclick="getWeatherForLocations()">Compare Weather</button>
        </div>

        <h2>Summary Table</h2>
        <table>
            <thead>
                <tr>
                    <th>Location</th>
                    <th>Average Temperature (&deg;F)</th>
                    <th>Total Precipitation (inches)</th>
                    <th>GDU Accumulations</th>
                </tr>
            </thead>
            <tbody id="summaryTableBody">
                <!-- Data will be dynamically inserted here -->
            </tbody>
        </table>

        <div class="chart-container">
            <div class="chart-box">
                <canvas id="temperatureChart"></canvas>
            </div>
            <div class="chart-box">
                <canvas id="precipitationChart"></canvas>
            </div>
            <div class="chart-box">
                <canvas id="gduChart"></canvas>
            </div>
        </div>

        <h2>GDU Accumulation Table</h2>
        <table>
            <thead id="gduTableHead">
                <!-- Header rows for locations will be dynamically inserted here -->
            </thead>
            <tbody id="gduTableBody">
                <!-- GDU data will be dynamically inserted here -->
            </tbody>
        </table>

        <script>
        let temperatureChart;
        let precipitationChart;
        let gduChart;

        async function getWeatherForLocations() {
            const apiKey = 'MY58AFKAGMVMKTYEQYASYMJLZ'; // Replace with your Visual Crossing API key
            const locations = [
                {
                    name: document.getElementById('locationInput1').value,
                    startDate: document.getElementById('startDateInput1').value,
                    endDate: document.getElementById('endDateInput1').value
                },
                {
                    name: document.getElementById('locationInput2').value,
                    startDate: document.getElementById('startDateInput2').value,
                    endDate: document.getElementById('endDateInput2').value
                },
                {
                    name: document.getElementById('locationInput3').value,
                    startDate: document.getElementById('startDateInput3').value,
                    endDate: document.getElementById('endDateInput3').value
                }
            ].filter(loc => loc.name.trim() !== "");

            if (locations.length === 0) {
                alert('Please enter at least one location with its date range.');
                return;
            }

            const temperatureData = [];
            const temperatureTimeSeries = {};
            const precipitationTimeSeries = {};
            const gduData = {};
            const allDates = new Set();

            try {
                for (const location of locations) {
                    if (!location.startDate || !location.endDate) {
                        alert(`Please enter a date range for ${location.name}.`);
                        return;
                    }

                    const response = await fetch(`https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${location.name}/${location.startDate}/${location.endDate}?unitGroup=metric&key=${apiKey}`);
                    if (!response.ok) {
                        throw new Error(`Failed to fetch weather data for ${location.name}.`);
                    }

                    const data = await response.json();

                    const avgTemp = data.days.reduce((sum, day) => sum + day.temp, 0) / data.days.length;
                    const avgTempF = (avgTemp * 9/5) + 32;

                    const dailyTemperatures = data.days.map(day => {
                        allDates.add(day.datetime);
                        return {
                            date: day.datetime,
                            tempF: (day.temp * 9/5) + 32
                        };
                    });

                    temperatureTimeSeries[location.name] = dailyTemperatures;

                    const dailyPrecipitations = data.days.map(day => {
                        allDates.add(day.datetime);
                        return {
                            date: day.datetime,
                            precipIn: (day.precip || 0) / 25.4
                        };
                    });

                    precipitationTimeSeries[location.name] = dailyPrecipitations;

                    let cumulativeGDU = 0;
                    gduData[location.name] = data.days.map(day => {
                        allDates.add(day.datetime);
                        let maxTempF = Math.min((day.tempmax * 9/5) + 32, 85);
                        let minTempF = Math.max((day.tempmin * 9/5) + 32, 40);
                        const gdu = Math.max(((maxTempF + minTempF) / 2) - 40, 0);
                        cumulativeGDU += gdu;
                        return { date: day.datetime, cumulativeGDU };
                    });

                    temperatureData.push(avgTempF);
                }

                const sortedDates = Array.from(allDates).sort();
                updateCharts(locations.map(loc => loc.name), temperatureTimeSeries, precipitationTimeSeries, gduData, sortedDates);
                updateSummaryTable(locations.map(loc => loc.name), temperatureData, precipitationTimeSeries, gduData);
                updateGduTable(locations.map(loc => loc.name), gduData);
            } catch (error) {
                alert(error.message);
            }
        }

        function updateCharts(locations, temperatureTimeSeries, precipitationTimeSeries, gduData, sortedDates) {
            const ctxTemp = document.getElementById('temperatureChart').getContext('2d');
            const ctxPrecip = document.getElementById('precipitationChart').getContext('2d');
            const ctxGdu = document.getElementById('gduChart').getContext('2d');

            if (temperatureChart) temperatureChart.destroy();
            if (precipitationChart) precipitationChart.destroy();
            if (gduChart) gduChart.destroy();

            const tempDatasets = locations.map((location, index) => {
                const alignedTemps = sortedDates.map(date => {
                    const dayData = temperatureTimeSeries[location]?.find(entry => entry.date === date);
                    return dayData ? dayData.tempF : null;
                });
                return {
                    label: `Temperature - ${location}`,
                    data: alignedTemps,
                    borderColor: `hsl(${index * 120}, 70%, 50%)`,
                    borderWidth: 2
                };
            });

            temperatureChart = new Chart(ctxTemp, {
                type: 'line',
                data: {
                    labels: sortedDates,
                    datasets: tempDatasets
                },
                options: {
                    responsive: true,
                    spanGaps: true
                }
            });

            const precipDatasets = locations.map((location, index) => {
                const alignedPrecip = sortedDates.map(date => {
                    const dayData = precipitationTimeSeries[location]?.find(entry => entry.date === date);
                    return dayData ? dayData.precipIn : null;
                });
                return {
                    label: `Precipitation - ${location}`,
                    data: alignedPrecip,
                    borderColor: `hsl(${index * 120}, 70%, 50%)`,
                    backgroundColor: `hsla(${index * 120}, 70%, 50%, 0.5)`,
                    borderWidth: 2
                };
            });

            precipitationChart = new Chart(ctxPrecip, {
                type: 'bar',
                data: {
                    labels: sortedDates,
                    datasets: precipDatasets
                },
                options: {
                    responsive: true,
                    spanGaps: true
                }
            });

            const gduDatasets = locations.map((location, index) => {
                const alignedGDUs = sortedDates.map(date => {
                    const dayData = gduData[location]?.find(entry => entry.date === date);
                    return dayData ? dayData.cumulativeGDU : null;
                });
                return {
                    label: `Cumulative GDU - ${location}`,
                    data: alignedGDUs,
                    borderColor: `hsl(${index * 120}, 70%, 50%)`,
                    borderWidth: 2
                };
            });

            gduChart = new Chart(ctxGdu, {
                type: 'line',
                data: {
                    labels: sortedDates,
                    datasets: gduDatasets
                },
                options: {
                    responsive: true,
                    spanGaps: true
                }
            });
        }

        function updateSummaryTable(locations, temperatureData, precipitationData, gduData) {
            const summaryTableBody = document.getElementById('summaryTableBody');
            summaryTableBody.innerHTML = '';
            locations.forEach((location, index) => {
                const totalPrecip = precipitationData[location]?.reduce((sum, entry) => sum + entry.precipIn, 0) || 0;
                const row = `<tr>
                    <td>${location}</td>
                    <td>${temperatureData[index]?.toFixed(2) || 'N/A'}</td>
                    <td>${totalPrecip.toFixed(2) || 'N/A'}</td>
                    <td>${gduData[location]?.[gduData[location].length - 1]?.cumulativeGDU.toFixed(2) || 'N/A'}</td>
                </tr>`;
                summaryTableBody.innerHTML += row;
            });
        }

        function updateGduTable(locations, gduData) {
            const gduTableHead = document.getElementById('gduTableHead');
            const gduTableBody = document.getElementById('gduTableBody');

            // Create header row
            gduTableHead.innerHTML = `<tr><th>Date</th>${locations.map(loc => `<th>${loc}</th>`).join('')}</tr>`;

            // Create rows for each day
            const numDays = gduData[locations[0]]?.length || 0;
            gduTableBody.innerHTML = '';
            for (let i = 0; i < numDays; i++) {
                const row = `<tr><td>${gduData[locations[0]][i]?.date || 'N/A'}</td>${locations.map(loc => `<td>${gduData[loc]?.[i]?.cumulativeGDU.toFixed(2) || 'N/A'}</td>`).join('')}</tr>`;
                gduTableBody.innerHTML += row;
            }
        }
        </script>
</body>
</html>
